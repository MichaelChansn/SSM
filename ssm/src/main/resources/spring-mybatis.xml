<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="http://www.springframework.org/schema/beans  
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context-3.1.xsd  
  http://www.springframework.org/schema/mvc  
  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
  <!-- 自动扫描 -->
  <context:component-scan base-package="com.ks.ssm" />
  <!-- 引入配置文件 -->
  <bean id="propertyConfigurer"
    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <!-- <property name="location" value="classpath:jdbc.properties" /> -->
    <property name="locations">  
            <list>  
            	<value>classpath:jdbc.properties</value>
                <value>classpath:mail.properties</value>  
            </list>  
        </property>  
  </bean>
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
    destroy-method="close">
    <property name="driverClassName" value="${driver}" />
    <property name="url" value="${url}" />
    <property name="username" value="${username}" />
    <property name="password" value="${password}" />
    <!-- 初始化连接大小 -->
    <property name="initialSize" value="${initialSize}"></property>
    <!-- 连接池最大数量 -->
    <property name="maxActive" value="${maxActive}"></property>
    <!-- 连接池最大空闲 -->
    <property name="maxIdle" value="${maxIdle}"></property>
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="${minIdle}"></property>
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="${maxWait}"></property>
  </bean>

  <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <!-- 自动扫描mapping.xml文件 -->
    <property name="mapperLocations" value="classpath:com/ks/ssm/mapping/*.xml"></property>
  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.ks.ssm.dao" />
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>
<!-- kaptcha验证码 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg type="java.util.Properties">  
                    <props>  
                        <prop key="kaptcha.border">no</prop>  
                        <prop key="kaptcha.textproducer.font.color">red</prop>  
                        <prop key="kaptcha.image.width">125</prop>  
                        <prop key="kaptcha.image.height">45</prop>  
                        <prop key="kaptcha.textproducer.font.size">40</prop>  
                        <prop key="kaptcha.session.key">code</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>  
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>  
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
     <!-- kaptcha配置选项
    kaptcha.border  是否有边框  默认为true  我们可以自己设置yes，no  
	kaptcha.border.color   边框颜色   默认为Color.BLACK  
	kaptcha.border.thickness  边框粗细度  默认为1  
	kaptcha.producer.impl   验证码生成器  默认为DefaultKaptcha  
	kaptcha.textproducer.impl   验证码文本生成器  默认为DefaultTextCreator  
	kaptcha.textproducer.char.string   验证码文本字符内容范围  默认为abcde2345678gfynmnpwx  
	kaptcha.textproducer.char.length   验证码文本字符长度  默认为5  
	kaptcha.textproducer.font.names    验证码文本字体样式  默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)  
	kaptcha.textproducer.font.size   验证码文本字符大小  默认为40  
	kaptcha.textproducer.font.color  验证码文本字符颜色  默认为Color.BLACK  
	kaptcha.textproducer.char.space  验证码文本字符间距  默认为2  
	kaptcha.noise.impl    验证码噪点生成对象  默认为DefaultNoise  
	kaptcha.noise.color   验证码噪点颜色   默认为Color.BLACK  
	kaptcha.obscurificator.impl   验证码样式引擎  默认为WaterRipple  
	kaptcha.word.impl   验证码文本字符渲染   默认为DefaultWordRenderer  
	kaptcha.background.impl   验证码背景生成器   默认为DefaultBackground  
	kaptcha.background.clear.from   验证码背景颜色渐进   默认为Color.LIGHT_GRAY  
	kaptcha.background.clear.to   验证码背景颜色渐进   默认为Color.WHITE  
	kaptcha.image.width   验证码图片宽度  默认为200  
	kaptcha.image.height  验证码图片高度  默认为50 
     -->
   
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">  
       <property name="host" value="${mail.host}"/>  
       <property name="username" value="${mail.username}"/>  
       <property name="password" value="${mail.password}"/>  
        <property name="defaultEncoding" value="UTF-8"></property>  
        <property name="javaMailProperties">  
             <props>  
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>  
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>  
                
                <!--  
                <prop key="mail.smtp.starttls.enable">true</prop>  
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>  
                <prop key="mail.smtp.socketFactory.fallback">false</prop>  
                  -->
            </props>  
        </property>  
  	</bean>   
    <bean id="simpleMailMessage" class="org.springframework.mail.SimpleMailMessage" scope="prototype">  
    <property name="from">  
        <value>${mail.default.from}</value>  
    </property>  
  </bean>  
 <!--线程池异步发送邮件-->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5" />
        <property name="maxPoolSize" value="10" />
        <property name="queueCapacity" value="25" />
    </bean>
    <!--velocity模板-->
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">  
        <property name="velocityProperties">     
            <props>     
                <prop key="resource.loader">class</prop>     
                <prop key="class.resource.loader.class">     
                    org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader     
                </prop>     
                <prop key="velocimacro.library"></prop>     
            </props>     
        </property>     
   </bean>  
</beans>