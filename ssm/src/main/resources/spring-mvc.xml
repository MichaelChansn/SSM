<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="http://www.springframework.org/schema/beans  
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context-3.1.xsd  
  http://www.springframework.org/schema/mvc  
  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
  <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
  <context:component-scan base-package="com.ks.ssm.controller" />
  <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
  <bean id="mappingJacksonHttpMessageConverter"
    class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
    <property name="supportedMediaTypes">
      <list>
        <value>text/html;charset=UTF-8</value>
      </list>
    </property>
  </bean>
  <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
  <bean
    class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    <property name="messageConverters">
      <list>
        <ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
      </list>
    </property>
  </bean>
  
  
  <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 p:prefix中模板放置路径 -->
	<bean id="velocityConfig"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/velocity/" />
		<property name="configLocation" value="classpath:velocity.properties" /> 
		<property name="velocityProperties">    
        <props>    
       		<prop key="contentType">text/html;charset=UTF-8</prop>
            <prop  key="input.encoding">UTF-8</prop>    
            <prop  key="output.encoding">UTF-8</prop>  
            <prop key="velocimacro.library">templates/macros.vm</prop>    
         </props>    
     </property> 
	</bean>
    <!-- 配置视图的显示 -->  
    <bean id="ViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">  
        <property name="prefix" value="/" /><!-- 视图文件的前缀，即存放的路径 -->  
        <property name="suffix" value=".vm" /><!-- 视图文件的后缀名 -->  
          <property name="toolboxConfigLocation" value="/WEB-INF/tools.xml" /><!--toolbox配置文件路径-->  
        <property name="dateToolAttribute" value="date" /><!--日期函数名称-->  
        <property name="numberToolAttribute" value="number" /><!--数字函数名称-->  
        <property name="contentType" value="text/html;charset=UTF-8" />  
        <property name="exposeSpringMacroHelpers" value="true" /><!--是否使用spring对宏定义的支持-->  
        <property name="exposeRequestAttributes" value="true" /><!--是否开放request属性-->  
        <property name="requestContextAttribute" value="rc"/><!--request属性引用名称-->  
        <property name="layoutUrl" value="layout/default.vm"/><!--指定layout文件-->
    </bean>  
  
  
  <!-- 定义跳转的文件的前后缀 ，视图模式配置-->
 <!--   <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
    <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
 <!--   <property name="prefix" value="/WEB-INF/jsp/" />
    <property name="suffix" value=".jsp" />
  </bean>
   -->
  
  <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
  <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="1048576" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 
    
    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
    <bean id="exceptionResolver"  
        class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->  
                <prop  
                    key="org.springframework.web.multipart.MaxUploadSizeExceededException">error</prop>  
            </props>  
        </property>  
    </bean>  
    
   
        <!-- 国际化配置 -->  
    <bean id="localeResolver"  
        class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />  
   <!--  <bean id="messageSource"  
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basenames">  
            <list>  
                <value>classpath:messages/messages</value>  
                <value>classpath:messages/Validation</value>  
            </list>  
        </property>  
        <property name="useCodeAsDefaultMessage" value="true" />  
    </bean>   -->
    <!-- 注册验证器 -->  
    <mvc:annotation-driven validator="validator" />    
      
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">    
          <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>    
          <!-- 这里配置将使用上面国际化配置的messageSource -->  
          <!-- <property name="validationMessageSource" ref="messageSource"/>  -->   
      </bean>  
      
      
      <!-- 拦截器配置 -->
	<mvc:interceptors >
     <!-- 配置LoginCheck拦截器，自动登录判断 -->
     <mvc:interceptor >
         <mvc:mapping path = "/**" />
         <bean class = "com.ks.ssm.interceptors.LoginInterceptor" />
     </mvc:interceptor >
	</mvc:interceptors >
</beans>